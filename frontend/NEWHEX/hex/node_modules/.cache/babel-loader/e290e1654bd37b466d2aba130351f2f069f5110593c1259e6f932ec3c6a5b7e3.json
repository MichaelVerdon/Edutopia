{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemes\\\\Desktop\\\\Work\\\\MENG TEAMPROJECT\\\\NEWHEX\\\\hex\\\\src\\\\InteractiveHexagon.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Hexagon, Text } from 'react-hexgrid';\nimport configs from './configurations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveHexagon = ({\n  tile\n}) => {\n  _s();\n  const [isActive, setIsActive] = useState(false);\n  const handleClick = () => {\n    setIsActive(!isActive); // Toggle the active state\n    // Log tile info and coordinates (optional)\n    console.log('Hexagon clicked:', tile.getTileInfo(), `Coordinates: q: ${tile.q}, r: ${tile.r}, s: ${tile.s}`);\n  };\n\n  // Determine the fill pattern based on the biome\n  const fillColor = isActive ? 'red' : determineFillColor(tile.biome);\n  return /*#__PURE__*/_jsxDEV(Hexagon, {\n    q: tile.q,\n    r: tile.r,\n    s: tile.s,\n    size: configs.hexSize,\n    fill: fillColor,\n    onClick: handleClick,\n    className: `hexagon-group ${isActive ? 'active' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      className: \"hexagon-text\",\n      children: `${tile.q},${tile.r},${tile.s}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveHexagon, \"OFRYOMGmWDzfQ4dzLF00ag1mHo0=\");\n_c = InteractiveHexagon;\nfunction determineFillColor(biome) {\n  switch (biome) {\n    case \"Plains\":\n      return \"url(#pat1)\";\n    case \"Rock\":\n      return \"url(#pat2)\";\n    default:\n      return \"none\";\n    // default color or pattern\n  }\n}\nexport default InteractiveHexagon;\nvar _c;\n$RefreshReg$(_c, \"InteractiveHexagon\");","map":{"version":3,"names":["React","useState","Hexagon","Text","configs","jsxDEV","_jsxDEV","InteractiveHexagon","tile","_s","isActive","setIsActive","handleClick","console","log","getTileInfo","q","r","s","fillColor","determineFillColor","biome","size","hexSize","fill","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nemes/Desktop/Work/MENG TEAMPROJECT/NEWHEX/hex/src/InteractiveHexagon.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Hexagon, Text } from 'react-hexgrid';\r\nimport configs from './configurations';\r\n\r\nconst InteractiveHexagon = ({ tile }) => {\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    setIsActive(!isActive); // Toggle the active state\r\n    // Log tile info and coordinates (optional)\r\n    console.log('Hexagon clicked:', tile.getTileInfo(), `Coordinates: q: ${tile.q}, r: ${tile.r}, s: ${tile.s}`);\r\n  };\r\n\r\n  // Determine the fill pattern based on the biome\r\n  const fillColor = isActive ? 'red' : determineFillColor(tile.biome);\r\n\r\n  return (\r\n    <Hexagon \r\n      q={tile.q} \r\n      r={tile.r} \r\n      s={tile.s} \r\n      size={configs.hexSize} \r\n      fill={fillColor}\r\n      onClick={handleClick}\r\n      className={`hexagon-group ${isActive ? 'active' : ''}`}\r\n    >\r\n      <Text className=\"hexagon-text\">{`${tile.q},${tile.r},${tile.s}`}</Text>\r\n    </Hexagon>\r\n  );\r\n};\r\n\r\nfunction determineFillColor(biome) {\r\n  switch(biome) {\r\n    case \"Plains\": return \"url(#pat1)\";\r\n    case \"Rock\": return \"url(#pat2)\";\r\n    default: return \"none\"; // default color or pattern\r\n  }\r\n}\r\n\r\nexport default InteractiveHexagon;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,OAAO,EAAEC,IAAI,QAAQ,eAAe;AAC7C,OAAOC,OAAO,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxBD,WAAW,CAAC,CAACD,QAAQ,CAAC,CAAC,CAAC;IACxB;IACAG,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEN,IAAI,CAACO,WAAW,CAAC,CAAC,EAAG,mBAAkBP,IAAI,CAACQ,CAAE,QAAOR,IAAI,CAACS,CAAE,QAAOT,IAAI,CAACU,CAAE,EAAC,CAAC;EAC9G,CAAC;;EAED;EACA,MAAMC,SAAS,GAAGT,QAAQ,GAAG,KAAK,GAAGU,kBAAkB,CAACZ,IAAI,CAACa,KAAK,CAAC;EAEnE,oBACEf,OAAA,CAACJ,OAAO;IACNc,CAAC,EAAER,IAAI,CAACQ,CAAE;IACVC,CAAC,EAAET,IAAI,CAACS,CAAE;IACVC,CAAC,EAAEV,IAAI,CAACU,CAAE;IACVI,IAAI,EAAElB,OAAO,CAACmB,OAAQ;IACtBC,IAAI,EAAEL,SAAU;IAChBM,OAAO,EAAEb,WAAY;IACrBc,SAAS,EAAG,iBAAgBhB,QAAQ,GAAG,QAAQ,GAAG,EAAG,EAAE;IAAAiB,QAAA,eAEvDrB,OAAA,CAACH,IAAI;MAACuB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAG,GAAEnB,IAAI,CAACQ,CAAE,IAAGR,IAAI,CAACS,CAAE,IAAGT,IAAI,CAACU,CAAE;IAAC;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChE,CAAC;AAEd,CAAC;AAACtB,EAAA,CAzBIF,kBAAkB;AAAAyB,EAAA,GAAlBzB,kBAAkB;AA2BxB,SAASa,kBAAkBA,CAACC,KAAK,EAAE;EACjC,QAAOA,KAAK;IACV,KAAK,QAAQ;MAAE,OAAO,YAAY;IAClC,KAAK,MAAM;MAAE,OAAO,YAAY;IAChC;MAAS,OAAO,MAAM;IAAE;EAC1B;AACF;AAEA,eAAed,kBAAkB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}