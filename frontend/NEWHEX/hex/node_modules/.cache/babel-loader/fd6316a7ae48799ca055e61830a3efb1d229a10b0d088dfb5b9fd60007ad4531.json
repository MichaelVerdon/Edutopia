{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemes\\\\Desktop\\\\Work\\\\MENG TEAMPROJECT\\\\NEWHEX\\\\hex\\\\src\\\\InteractiveHexagon.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Hexagon, Text } from 'react-hexgrid';\nimport configs from './configurations';\nimport './hex.css';\nimport GameSettings from './GameSettings';\nimport plains from './plains.png';\nimport mountain from './mountain.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveHexagon = ({\n  tile\n}) => {\n  _s();\n  const [isActive, setIsActive] = useState(false);\n  const handleClick = () => {\n    console.log('Hexagon clicked');\n    console.log('Tile:', tile);\n    console.log(tile.getTileInfo());\n    console.log(\"----------------------------------------------------\");\n    console.log(`\"q\": ${tile.q}, \"r\": ${tile.r}, \"s\": ${tile.s}`);\n    setIsActive(!isActive);\n    console.log(\"Is active: \", !isActive);\n  };\n\n  // Determine the fill pattern based on the biome\n  const fillColor = isActive ? 'red' : determineFillColor(tile.biome);\n  return /*#__PURE__*/_jsxDEV(Hexagon, {\n    q: tile.q,\n    r: tile.r,\n    s: tile.s,\n    size: configs.hexSize,\n    fill: fillColor,\n    onClick: handleClick,\n    className: `hexagon-group ${isActive ? 'active' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      className: \"hexagon-text\",\n      children: `${tile.q},${tile.r},${tile.s}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 7\n  }, this);\n  function determineFillColor(biome) {\n    switch (biome) {\n      case \"Rock\":\n        return \"url(#pat1)\";\n      case \"Mountain\":\n        return \"url(#pat2)\";\n      default:\n        return \"none\";\n    }\n  }\n};\n\n// Define the patterns outside of the component\n_s(InteractiveHexagon, \"OFRYOMGmWDzfQ4dzLF00ag1mHo0=\");\n_c = InteractiveHexagon;\nexport const Patterns = () => /*#__PURE__*/_jsxDEV(\"defs\", {\n  children: [/*#__PURE__*/_jsxDEV(\"pattern\", {\n    id: \"pat1\",\n    patternUnits: \"userSpaceOnUse\",\n    width: \"30\",\n    height: \"30\",\n    children: /*#__PURE__*/_jsxDEV(\"image\", {\n      href: plains,\n      x: \"0\",\n      y: \"0\",\n      width: \"30\",\n      height: \"30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"pattern\", {\n    id: \"pat2\",\n    patternUnits: \"userSpaceOnUse\",\n    width: \"30\",\n    height: \"30\",\n    children: /*#__PURE__*/_jsxDEV(\"image\", {\n      href: mountain,\n      x: \"0\",\n      y: \"0\",\n      width: \"30\",\n      height: \"30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 53,\n  columnNumber: 5\n}, this);\n_c2 = Patterns;\nexport default InteractiveHexagon;\nvar _c, _c2;\n$RefreshReg$(_c, \"InteractiveHexagon\");\n$RefreshReg$(_c2, \"Patterns\");","map":{"version":3,"names":["React","useState","Hexagon","Text","configs","GameSettings","plains","mountain","jsxDEV","_jsxDEV","InteractiveHexagon","tile","_s","isActive","setIsActive","handleClick","console","log","getTileInfo","q","r","s","fillColor","determineFillColor","biome","size","hexSize","fill","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Patterns","id","patternUnits","width","height","href","x","y","_c2","$RefreshReg$"],"sources":["C:/Users/nemes/Desktop/Work/MENG TEAMPROJECT/NEWHEX/hex/src/InteractiveHexagon.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Hexagon, Text } from 'react-hexgrid';\r\nimport configs from './configurations';\r\nimport './hex.css';\r\nimport GameSettings from './GameSettings';\r\nimport plains from './plains.png';\r\nimport mountain from './mountain.png';\r\n\r\nconst InteractiveHexagon = ({ tile }) => {\r\n    const [isActive, setIsActive] = useState(false);\r\n  \r\n    const handleClick = () => {\r\n      console.log('Hexagon clicked');\r\n      console.log('Tile:', tile);\r\n      console.log(tile.getTileInfo());\r\n      console.log(\"----------------------------------------------------\");\r\n      console.log(`\"q\": ${tile.q}, \"r\": ${tile.r}, \"s\": ${tile.s}`);\r\n      setIsActive(!isActive);\r\n      console.log(\"Is active: \", !isActive);\r\n    };\r\n  \r\n    // Determine the fill pattern based on the biome\r\n    const fillColor = isActive ? 'red' : determineFillColor(tile.biome);\r\n  \r\n    return (\r\n      <Hexagon \r\n        q={tile.q} \r\n        r={tile.r} \r\n        s={tile.s} \r\n        size={configs.hexSize} \r\n        fill={fillColor}\r\n        onClick={handleClick}\r\n        className={`hexagon-group ${isActive ? 'active' : ''}`}\r\n      >\r\n        <Text className=\"hexagon-text\">{`${tile.q},${tile.r},${tile.s}`}</Text>\r\n      </Hexagon>\r\n    );\r\n\r\n    function determineFillColor(biome) {\r\n        switch (biome) {\r\n          case \"Rock\":\r\n            return \"url(#pat1)\";\r\n          case \"Mountain\":\r\n            return \"url(#pat2)\";\r\n          default:\r\n            return \"none\";\r\n        }\r\n    }\r\n};\r\n\r\n// Define the patterns outside of the component\r\nexport const Patterns = () => (\r\n    <defs>\r\n        <pattern id=\"pat1\" patternUnits=\"userSpaceOnUse\" width=\"30\" height=\"30\">\r\n            <image href={plains} x=\"0\" y=\"0\" width=\"30\" height=\"30\" />\r\n        </pattern>\r\n        <pattern id=\"pat2\" patternUnits=\"userSpaceOnUse\" width=\"30\" height=\"30\">\r\n            <image href={mountain} x=\"0\" y=\"0\" width=\"30\" height=\"30\" />\r\n        </pattern>\r\n    </defs>\r\n);\r\n\r\nexport default InteractiveHexagon;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}