{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemes\\\\Desktop\\\\Work\\\\MENG TEAMPROJECT\\\\NEWHEX\\\\hex\\\\src\\\\InteractiveHexagon.js\";\n//This component is responsible for rendering the hexagonal tiles and the interactivity.\n\nimport React from 'react';\nimport { Hexagon, Text } from 'react-hexgrid';\nimport configs from './configurations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveHexagon = ({\n  tile\n}) => {\n  // Define what happens when you click on a hexagon\n  const handleClick = () => {\n    console.log(`Hexagon clicked: ${tile.q},${tile.r},${tile.s}`);\n    // Implement additional click handling logic based on the Tile instance\n    // For example, changing ownership, updating resources, etc.\n  };\n\n  // Customize the appearance of the hexagon based on the Tile properties\n  // For example, changing color based on biome\n  const fillColor = tile.biome ? determineColorBasedOnBiome(tile.biome) : \"gray\";\n  return /*#__PURE__*/_jsxDEV(Hexagon, {\n    q: tile.q,\n    r: tile.r,\n    s: tile.s,\n    size: configs.hexSize,\n    fill: fillColor,\n    onClick: handleClick,\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      children: `${tile.q},${tile.r}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n// A helper function to determine hexagon color based on its biome\n_c = InteractiveHexagon;\nfunction determineColorBasedOnBiome(biome) {\n  switch (biome) {\n    case \"Forest\":\n      return \"green\";\n    case \"Desert\":\n      return \"yellow\";\n    // Add more cases as needed\n    default:\n      return \"gray\";\n  }\n}\nexport default InteractiveHexagon;\nvar _c;\n$RefreshReg$(_c, \"InteractiveHexagon\");","map":{"version":3,"names":["React","Hexagon","Text","configs","jsxDEV","_jsxDEV","InteractiveHexagon","tile","handleClick","console","log","q","r","s","fillColor","biome","determineColorBasedOnBiome","size","hexSize","fill","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nemes/Desktop/Work/MENG TEAMPROJECT/NEWHEX/hex/src/InteractiveHexagon.js"],"sourcesContent":["//This component is responsible for rendering the hexagonal tiles and the interactivity.\r\n\r\nimport React from 'react';\r\nimport { Hexagon, Text } from 'react-hexgrid';\r\nimport configs from './configurations'\r\n\r\nconst InteractiveHexagon = ({ tile }) => {\r\n  // Define what happens when you click on a hexagon\r\n  const handleClick = () => {\r\n    console.log(`Hexagon clicked: ${tile.q},${tile.r},${tile.s}`);\r\n    // Implement additional click handling logic based on the Tile instance\r\n    // For example, changing ownership, updating resources, etc.\r\n  };\r\n\r\n  // Customize the appearance of the hexagon based on the Tile properties\r\n  // For example, changing color based on biome\r\n  const fillColor = tile.biome ? determineColorBasedOnBiome(tile.biome) : \"gray\"; \r\n\r\n  return (\r\n    <Hexagon q={tile.q} r={tile.r} s={tile.s} size={configs.hexSize} fill={fillColor} onClick={handleClick}>\r\n      <Text>{`${tile.q},${tile.r}`}</Text>\r\n      {/* Additional SVG elements as needed, e.g., resource icons */}\r\n    </Hexagon>\r\n  );\r\n};\r\n\r\n// A helper function to determine hexagon color based on its biome\r\nfunction determineColorBasedOnBiome(biome) {\r\n  switch(biome) {\r\n    case \"Forest\": return \"green\";\r\n    case \"Desert\": return \"yellow\";\r\n    // Add more cases as needed\r\n    default: return \"gray\";\r\n  }\r\n}\r\n\r\nexport default InteractiveHexagon;\r\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,IAAI,QAAQ,eAAe;AAC7C,OAAOC,OAAO,MAAM,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EACvC;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBC,OAAO,CAACC,GAAG,CAAE,oBAAmBH,IAAI,CAACI,CAAE,IAAGJ,IAAI,CAACK,CAAE,IAAGL,IAAI,CAACM,CAAE,EAAC,CAAC;IAC7D;IACA;EACF,CAAC;;EAED;EACA;EACA,MAAMC,SAAS,GAAGP,IAAI,CAACQ,KAAK,GAAGC,0BAA0B,CAACT,IAAI,CAACQ,KAAK,CAAC,GAAG,MAAM;EAE9E,oBACEV,OAAA,CAACJ,OAAO;IAACU,CAAC,EAAEJ,IAAI,CAACI,CAAE;IAACC,CAAC,EAAEL,IAAI,CAACK,CAAE;IAACC,CAAC,EAAEN,IAAI,CAACM,CAAE;IAACI,IAAI,EAAEd,OAAO,CAACe,OAAQ;IAACC,IAAI,EAAEL,SAAU;IAACM,OAAO,EAAEZ,WAAY;IAAAa,QAAA,eACrGhB,OAAA,CAACH,IAAI;MAAAmB,QAAA,EAAG,GAAEd,IAAI,CAACI,CAAE,IAAGJ,IAAI,CAACK,CAAE;IAAC;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE7B,CAAC;AAEd,CAAC;;AAED;AAAAC,EAAA,GApBMpB,kBAAkB;AAqBxB,SAASU,0BAA0BA,CAACD,KAAK,EAAE;EACzC,QAAOA,KAAK;IACV,KAAK,QAAQ;MAAE,OAAO,OAAO;IAC7B,KAAK,QAAQ;MAAE,OAAO,QAAQ;IAC9B;IACA;MAAS,OAAO,MAAM;EACxB;AACF;AAEA,eAAeT,kBAAkB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}