{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemes\\\\Desktop\\\\Work\\\\MENG TEAMPROJECT\\\\NEWHEX\\\\hex\\\\src\\\\InteractiveHexagon.js\",\n  _s = $RefreshSig$();\n//This component is responsible for rendering the hexagonal tiles and the interactivity.\n\nimport React, { useState } from 'react';\nimport { Hexagon, Text } from 'react-hexgrid';\nimport configs from './configurations';\nimport './hex.css';\nimport tile from './Tile';\nimport rock from './rock';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveHexagon = ({\n  tile\n}) => {\n  _s();\n  const [isActive, setIsActive] = useState(false);\n  const handleClick = () => {\n    console.log('Hexagon clicked');\n    console.log('Tile:', tile);\n    console.log(tile.getTileInfo());\n    console.log(\"----------------------------------------------------\");\n    console.log(`\"q\": ${tile.q}, \"r\": ${tile.r}, \"s\": ${tile.s}`);\n    setIsActive(!isActive); // Toggle the active state\n    console.log(\"Is active: \", !isActive);\n  };\n\n  // Determine the fill pattern based on the biome\n  const fillColor = isActive ? 'red' : determineFillColor(tile.biome);\n  const rock1 = this.tile.biome === \"Mountain\" ? /*#__PURE__*/_jsxDEV(RotatedPattern, {\n    id: rock,\n    link: rock,\n    size: {\n      x: 6,\n      y: 6\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [rock1, /*#__PURE__*/_jsxDEV(Hexagon, {\n      q: tile.q,\n      r: tile.r,\n      s: tile.s,\n      size: configs.hexSize,\n      fill: isActive ? 'red' : fillColor // Toggle between red and biome-specific pattern\n      ,\n      onClick: handleClick,\n      className: `hexagon-group ${isActive ? 'active' : ''}` // Apply a class conditionally\n      ,\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        className: \"hexagon-text\",\n        children: `${tile.q},${tile.r},${tile.s}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n  function determineFillColor(biome) {\n    switch (biome) {\n      case \"Rock\":\n        return \"url(#pat1)\";\n      // Use the pattern ID for rocks\n      case \"Mountain\":\n        return \"url(#pat2)\";\n      // If you have a different pattern for mountains\n      default:\n        return \"none\";\n      // No fill for other biomes\n    }\n  }\n  const RotatedPattern = ({\n    id,\n    link\n  }) => /*#__PURE__*/_jsxDEV(\"svg\", {\n    style: {\n      height: 0\n    },\n    children: /*#__PURE__*/_jsxDEV(\"defs\", {\n      children: /*#__PURE__*/_jsxDEV(\"pattern\", {\n        id: id,\n        patternUnits: \"objectBoundingBox\",\n        width: \"1\",\n        height: \"1\",\n        viewBox: \"0 0 30 30\",\n        preserveAspectRatio: \"xMidYMid slice\",\n        children: /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: \"rotate(30, 15, 15)\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"image\", {\n            href: link,\n            x: \"0\",\n            y: \"0\",\n            width: \"30\",\n            height: \"30\",\n            preserveAspectRatio: \"xMidYMid slice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(InteractiveHexagon, \"OFRYOMGmWDzfQ4dzLF00ag1mHo0=\");\n_c = InteractiveHexagon;\nexport default InteractiveHexagon;\nvar _c;\n$RefreshReg$(_c, \"InteractiveHexagon\");","map":{"version":3,"names":["React","useState","Hexagon","Text","configs","tile","rock","jsxDEV","_jsxDEV","InteractiveHexagon","_s","isActive","setIsActive","handleClick","console","log","getTileInfo","q","r","s","fillColor","determineFillColor","biome","rock1","RotatedPattern","id","link","size","x","y","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","children","hexSize","fill","onClick","className","style","height","patternUnits","width","viewBox","preserveAspectRatio","transform","href","_c","$RefreshReg$"],"sources":["C:/Users/nemes/Desktop/Work/MENG TEAMPROJECT/NEWHEX/hex/src/InteractiveHexagon.js"],"sourcesContent":["//This component is responsible for rendering the hexagonal tiles and the interactivity.\r\n\r\nimport React, { useState } from 'react';\r\nimport { Hexagon, Text } from 'react-hexgrid';\r\nimport configs from './configurations'\r\nimport './hex.css';\r\nimport tile from './Tile';\r\nimport rock from './rock';\r\n\r\nconst InteractiveHexagon = ({ tile }) => {\r\n    const [isActive, setIsActive] = useState(false);\r\n  \r\n    const handleClick = () => {\r\n      console.log('Hexagon clicked');\r\n      console.log('Tile:', tile);\r\n      console.log(tile.getTileInfo());\r\n      console.log(\"----------------------------------------------------\");\r\n      console.log(`\"q\": ${tile.q}, \"r\": ${tile.r}, \"s\": ${tile.s}`);\r\n      setIsActive(!isActive); // Toggle the active state\r\n      console.log(\"Is active: \", !isActive);\r\n\r\n      \r\n    };\r\n  \r\n    // Determine the fill pattern based on the biome\r\n    const fillColor = isActive ? 'red' : determineFillColor(tile.biome);\r\n  \r\n    const rock1 = this.tile.biome === \"Mountain\" ? (\r\n        <RotatedPattern id={rock} link={rock} size={{ x: 6, y: 6 }} />\r\n      ) : null;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {rock1}\r\n            <Hexagon \r\n              q={tile.q} \r\n              r={tile.r} \r\n              s={tile.s} \r\n              size={configs.hexSize} \r\n              fill={isActive ? 'red' : fillColor} // Toggle between red and biome-specific pattern\r\n              onClick={handleClick}\r\n              className={`hexagon-group ${isActive ? 'active' : ''}`} // Apply a class conditionally\r\n            >\r\n              <Text className=\"hexagon-text\">{`${tile.q},${tile.r},${tile.s}`}</Text>\r\n              {/* Additional SVG elements as needed */}\r\n            </Hexagon>\r\n      </React.Fragment>\r\n    );\r\n\r\n    function determineFillColor(biome) {\r\n        switch (biome) {\r\n          case \"Rock\":\r\n            return \"url(#pat1)\";  // Use the pattern ID for rocks\r\n          case \"Mountain\":\r\n            return \"url(#pat2)\";  // If you have a different pattern for mountains\r\n          default:\r\n            return \"none\";  // No fill for other biomes\r\n        }\r\n    }\r\n\r\n    const RotatedPattern = ({ id, link }) => (\r\n        <svg style={{ height: 0 }}>\r\n          <defs>\r\n            <pattern id={id} patternUnits=\"objectBoundingBox\" width=\"1\" height=\"1\" viewBox=\"0 0 30 30\" preserveAspectRatio=\"xMidYMid slice\">\r\n              <g transform=\"rotate(30, 15, 15)\"> {/* Rotate around the center */}\r\n                <image href={link} x=\"0\" y=\"0\" width=\"30\" height=\"30\" preserveAspectRatio=\"xMidYMid slice\" />\r\n              </g>\r\n            </pattern>\r\n          </defs>\r\n        </svg>\r\n      );\r\n\r\n\r\n  };\r\n  \r\n  export default InteractiveHexagon;\r\n  \r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}