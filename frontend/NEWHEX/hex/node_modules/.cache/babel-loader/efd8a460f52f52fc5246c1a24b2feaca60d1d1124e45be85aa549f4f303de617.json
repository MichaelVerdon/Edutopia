{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemes\\\\Desktop\\\\Work\\\\MENG TEAMPROJECT\\\\NEWHEX\\\\hex\\\\src\\\\InteractiveHexagon.js\";\n//This component is responsible for rendering the hexagonal tiles and the interactivity.\n\nimport React from 'react';\nimport { Hexagon, Text } from 'react-hexgrid';\nimport configs from './configurations';\nimport './hex.css';\nimport tile from './Tile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveHexagon = ({\n  tile\n}) => {\n  // Define what happens when you click on a hexagon\n  const handleClick = () => {\n    console.log('Hexagon clicked');\n    console.log(tile.getTileInfo());\n    console.log(\"----------------------------------------------------\");\n    console.log(`\"q\": ${tile.q}, \"r\": ${tile.r}, \"s\": ${tile.s}`);\n    ~setIsActive(!isActive); // Toggle the active state\n  };\n\n  // Customize the appearance of the hexagon based on the Tile properties\n  // For example, changing color based on biome\n  //const fillColor = tile.biome ? determineColorBasedOnBiome(tile.biome) : \"gray\"; \n  const fillColor = isActive ? 'red' : 'none'; // Use 'none' or your default color\n\n  return /*#__PURE__*/_jsxDEV(Hexagon, {\n    q: tile.q,\n    r: tile.r,\n    s: tile.s,\n    size: configs.hexSize,\n    fill: fillColor,\n    onClick: handleClick,\n    className: \"hexagon-group\",\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      className: \"hexagon-text\",\n      children: `${tile.q},${tile.r},${tile.s}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n// A helper function to determine hexagon color based on its biome\n_c = InteractiveHexagon;\nfunction determineColorBasedOnBiome(biome) {\n  switch (biome) {\n    case \"Forest\":\n      return \"green\";\n    case \"Desert\":\n      return \"yellow\";\n    // Add more cases as needed\n    default:\n      return \"gray\";\n  }\n}\nexport default InteractiveHexagon;\nvar _c;\n$RefreshReg$(_c, \"InteractiveHexagon\");","map":{"version":3,"names":["React","Hexagon","Text","configs","tile","jsxDEV","_jsxDEV","InteractiveHexagon","handleClick","console","log","getTileInfo","q","r","s","setIsActive","isActive","fillColor","size","hexSize","fill","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","determineColorBasedOnBiome","biome","$RefreshReg$"],"sources":["C:/Users/nemes/Desktop/Work/MENG TEAMPROJECT/NEWHEX/hex/src/InteractiveHexagon.js"],"sourcesContent":["//This component is responsible for rendering the hexagonal tiles and the interactivity.\r\n\r\nimport React from 'react';\r\nimport { Hexagon, Text } from 'react-hexgrid';\r\nimport configs from './configurations'\r\nimport './hex.css';\r\nimport tile from './Tile';\r\n\r\nconst InteractiveHexagon = ({ tile }) => {\r\n  // Define what happens when you click on a hexagon\r\n  const handleClick = () => {\r\n    console.log('Hexagon clicked');\r\n    console.log(tile.getTileInfo())\r\n    console.log(\"----------------------------------------------------\")\r\n    console.log(`\"q\": ${tile.q}, \"r\": ${tile.r}, \"s\": ${tile.s}`);~\r\n    setIsActive(!isActive); // Toggle the active state\r\n  };\r\n\r\n  // Customize the appearance of the hexagon based on the Tile properties\r\n  // For example, changing color based on biome\r\n  //const fillColor = tile.biome ? determineColorBasedOnBiome(tile.biome) : \"gray\"; \r\n  const fillColor = isActive ? 'red' : 'none'; // Use 'none' or your default color\r\n\r\n\r\n  return (\r\n    <Hexagon \r\n    q={tile.q} \r\n    r={tile.r} \r\n    s={tile.s} \r\n    size={configs.hexSize} \r\n    fill={fillColor} \r\n    onClick={handleClick}\r\n    className=\"hexagon-group\"\r\n    >\r\n      <Text className=\"hexagon-text\">{`${tile.q},${tile.r},${tile.s}`}</Text>\r\n      {/* Additional SVG elements as needed, e.g., resource icons */}\r\n    </Hexagon>\r\n  );\r\n};\r\n\r\n// A helper function to determine hexagon color based on its biome\r\nfunction determineColorBasedOnBiome(biome) {\r\n  switch(biome) {\r\n    case \"Forest\": return \"green\";\r\n    case \"Desert\": return \"yellow\";\r\n    // Add more cases as needed\r\n    default: return \"gray\";\r\n  }\r\n}\r\n\r\nexport default InteractiveHexagon;\r\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,IAAI,QAAQ,eAAe;AAC7C,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAO,WAAW;AAClB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,kBAAkB,GAAGA,CAAC;EAAEH;AAAK,CAAC,KAAK;EACvC;EACA,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9BD,OAAO,CAACC,GAAG,CAACN,IAAI,CAACO,WAAW,CAAC,CAAC,CAAC;IAC/BF,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;IACnED,OAAO,CAACC,GAAG,CAAE,QAAON,IAAI,CAACQ,CAAE,UAASR,IAAI,CAACS,CAAE,UAAST,IAAI,CAACU,CAAE,EAAC,CAAC;IAAC,CAC9DC,WAAW,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;EAC1B,CAAC;;EAED;EACA;EACA;EACA,MAAMC,SAAS,GAAGD,QAAQ,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;;EAG7C,oBACEV,OAAA,CAACL,OAAO;IACRW,CAAC,EAAER,IAAI,CAACQ,CAAE;IACVC,CAAC,EAAET,IAAI,CAACS,CAAE;IACVC,CAAC,EAAEV,IAAI,CAACU,CAAE;IACVI,IAAI,EAAEf,OAAO,CAACgB,OAAQ;IACtBC,IAAI,EAAEH,SAAU;IAChBI,OAAO,EAAEb,WAAY;IACrBc,SAAS,EAAC,eAAe;IAAAC,QAAA,eAEvBjB,OAAA,CAACJ,IAAI;MAACoB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAG,GAAEnB,IAAI,CAACQ,CAAE,IAAGR,IAAI,CAACS,CAAE,IAAGT,IAAI,CAACU,CAAE;IAAC;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEhE,CAAC;AAEd,CAAC;;AAED;AAAAC,EAAA,GAhCMrB,kBAAkB;AAiCxB,SAASsB,0BAA0BA,CAACC,KAAK,EAAE;EACzC,QAAOA,KAAK;IACV,KAAK,QAAQ;MAAE,OAAO,OAAO;IAC7B,KAAK,QAAQ;MAAE,OAAO,QAAQ;IAC9B;IACA;MAAS,OAAO,MAAM;EACxB;AACF;AAEA,eAAevB,kBAAkB;AAAC,IAAAqB,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}