{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemes\\\\Desktop\\\\Work\\\\MENG TEAMPROJECT\\\\NEWHEX\\\\hex\\\\src\\\\InteractiveHexagon.js\";\n//This component is responsible for rendering the hexagonal tiles and the interactivity.\n\nimport React from 'react';\nimport { Hexagon, Text } from 'react-hexgrid';\nimport configs from './configurations';\nimport './hex.css';\n//import Tile from './Tile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveHexagon = ({\n  tile\n}) => {\n  // Define what happens when you click on a hexagon\n  const handleClick = () => {\n    console.log(`Hexagon clicked: ${tile.q},${tile.r},${tile.s}`);\n    console.log(Tile.getTileInfo());\n  };\n\n  // Customize the appearance of the hexagon based on the Tile properties\n  // For example, changing color based on biome\n  const fillColor = tile.biome ? determineColorBasedOnBiome(tile.biome) : \"gray\";\n  return /*#__PURE__*/_jsxDEV(Hexagon, {\n    q: tile.q,\n    r: tile.r,\n    s: tile.s,\n    size: configs.hexSize,\n    fill: fillColor,\n    onClick: handleClick,\n    className: \"hexagon-group\",\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      className: \"hexagon-text\",\n      children: `${tile.q},${tile.r},${tile.s}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n// A helper function to determine hexagon color based on its biome\n_c = InteractiveHexagon;\nfunction determineColorBasedOnBiome(biome) {\n  switch (biome) {\n    case \"Forest\":\n      return \"green\";\n    case \"Desert\":\n      return \"yellow\";\n    // Add more cases as needed\n    default:\n      return \"gray\";\n  }\n}\nexport default InteractiveHexagon;\nvar _c;\n$RefreshReg$(_c, \"InteractiveHexagon\");","map":{"version":3,"names":["React","Hexagon","Text","configs","jsxDEV","_jsxDEV","InteractiveHexagon","tile","handleClick","console","log","q","r","s","Tile","getTileInfo","fillColor","biome","determineColorBasedOnBiome","size","hexSize","fill","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nemes/Desktop/Work/MENG TEAMPROJECT/NEWHEX/hex/src/InteractiveHexagon.js"],"sourcesContent":["//This component is responsible for rendering the hexagonal tiles and the interactivity.\r\n\r\nimport React from 'react';\r\nimport { Hexagon, Text } from 'react-hexgrid';\r\nimport configs from './configurations'\r\nimport './hex.css';\r\n//import Tile from './Tile';\r\n\r\nconst InteractiveHexagon = ({ tile }) => {\r\n  // Define what happens when you click on a hexagon\r\n  const handleClick = () => {\r\n    console.log(`Hexagon clicked: ${tile.q},${tile.r},${tile.s}`);\r\n    console.log(Tile.getTileInfo())\r\n  };\r\n\r\n  // Customize the appearance of the hexagon based on the Tile properties\r\n  // For example, changing color based on biome\r\n  const fillColor = tile.biome ? determineColorBasedOnBiome(tile.biome) : \"gray\"; \r\n\r\n  return (\r\n    <Hexagon \r\n    q={tile.q} \r\n    r={tile.r} \r\n    s={tile.s} \r\n    size={configs.hexSize} \r\n    fill={fillColor} \r\n    onClick={handleClick}\r\n    className=\"hexagon-group\"\r\n    >\r\n      <Text className=\"hexagon-text\">{`${tile.q},${tile.r},${tile.s}`}</Text>\r\n      {/* Additional SVG elements as needed, e.g., resource icons */}\r\n    </Hexagon>\r\n  );\r\n};\r\n\r\n// A helper function to determine hexagon color based on its biome\r\nfunction determineColorBasedOnBiome(biome) {\r\n  switch(biome) {\r\n    case \"Forest\": return \"green\";\r\n    case \"Desert\": return \"yellow\";\r\n    // Add more cases as needed\r\n    default: return \"gray\";\r\n  }\r\n}\r\n\r\nexport default InteractiveHexagon;\r\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,EAAEC,IAAI,QAAQ,eAAe;AAC7C,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAO,WAAW;AAClB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EACvC;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBC,OAAO,CAACC,GAAG,CAAE,oBAAmBH,IAAI,CAACI,CAAE,IAAGJ,IAAI,CAACK,CAAE,IAAGL,IAAI,CAACM,CAAE,EAAC,CAAC;IAC7DJ,OAAO,CAACC,GAAG,CAACI,IAAI,CAACC,WAAW,CAAC,CAAC,CAAC;EACjC,CAAC;;EAED;EACA;EACA,MAAMC,SAAS,GAAGT,IAAI,CAACU,KAAK,GAAGC,0BAA0B,CAACX,IAAI,CAACU,KAAK,CAAC,GAAG,MAAM;EAE9E,oBACEZ,OAAA,CAACJ,OAAO;IACRU,CAAC,EAAEJ,IAAI,CAACI,CAAE;IACVC,CAAC,EAAEL,IAAI,CAACK,CAAE;IACVC,CAAC,EAAEN,IAAI,CAACM,CAAE;IACVM,IAAI,EAAEhB,OAAO,CAACiB,OAAQ;IACtBC,IAAI,EAAEL,SAAU;IAChBM,OAAO,EAAEd,WAAY;IACrBe,SAAS,EAAC,eAAe;IAAAC,QAAA,eAEvBnB,OAAA,CAACH,IAAI;MAACqB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAG,GAAEjB,IAAI,CAACI,CAAE,IAAGJ,IAAI,CAACK,CAAE,IAAGL,IAAI,CAACM,CAAE;IAAC;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEhE,CAAC;AAEd,CAAC;;AAED;AAAAC,EAAA,GA3BMvB,kBAAkB;AA4BxB,SAASY,0BAA0BA,CAACD,KAAK,EAAE;EACzC,QAAOA,KAAK;IACV,KAAK,QAAQ;MAAE,OAAO,OAAO;IAC7B,KAAK,QAAQ;MAAE,OAAO,QAAQ;IAC9B;IACA;MAAS,OAAO,MAAM;EACxB;AACF;AAEA,eAAeX,kBAAkB;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}