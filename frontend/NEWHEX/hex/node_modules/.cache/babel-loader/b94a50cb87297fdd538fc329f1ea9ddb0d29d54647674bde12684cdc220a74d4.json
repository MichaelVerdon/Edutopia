{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemes\\\\Desktop\\\\Work\\\\MENG TEAMPROJECT\\\\NEWHEX\\\\hex\\\\src\\\\InteractiveHexagon.js\",\n  _s = $RefreshSig$();\n//This component is responsible for rendering the hexagonal tiles and the interactivity.\n\nimport React, { useState } from 'react';\nimport { Hexagon, Text } from 'react-hexgrid';\nimport configs from './configurations';\nimport './hex.css';\nimport tile from './Tile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveHexagon = ({\n  tile\n}) => {\n  _s();\n  const [isActive, setIsActive] = useState(false);\n  const handleClick = () => {\n    console.log('Hexagon clicked');\n    console.log('Tile:', tile);\n    //console.log(tile.getTileInfo());\n    console.log(\"----------------------------------------------------\");\n    console.log(`\"q\": ${tile.q}, \"r\": ${tile.r}, \"s\": ${tile.s}`);\n    setIsActive(!isActive); // Toggle the active state\n    console.log(\"Is active: \", !isActive);\n  };\n\n  // Determine the fill pattern based on the biome\n  const fillColor = tile.biome === \"Plains\" ? \"url(#pat1)\" : tile.biome === \"Rock\" ? \"url(#pat2)\" : \"none\"; // default color\n\n  return /*#__PURE__*/_jsxDEV(Hexagon, {\n    q: tile.q,\n    r: tile.r,\n    s: tile.s,\n    size: configs.hexSize,\n    fill: isActive ? 'red' : fillColor // Toggle between red and biome-specific pattern\n    ,\n    onClick: handleClick,\n    className: `hexagon-group ${isActive ? 'active' : ''}` // Apply a class conditionally\n    ,\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      className: \"hexagon-text\",\n      children: `${tile.q},${tile.r},${tile.s}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 7\n  }, this);\n};\n_s(InteractiveHexagon, \"OFRYOMGmWDzfQ4dzLF00ag1mHo0=\");\n_c = InteractiveHexagon;\nexport default InteractiveHexagon;\nvar _c;\n$RefreshReg$(_c, \"InteractiveHexagon\");","map":{"version":3,"names":["React","useState","Hexagon","Text","configs","tile","jsxDEV","_jsxDEV","InteractiveHexagon","_s","isActive","setIsActive","handleClick","console","log","q","r","s","fillColor","biome","size","hexSize","fill","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nemes/Desktop/Work/MENG TEAMPROJECT/NEWHEX/hex/src/InteractiveHexagon.js"],"sourcesContent":["//This component is responsible for rendering the hexagonal tiles and the interactivity.\r\n\r\nimport React, { useState } from 'react';\r\nimport { Hexagon, Text } from 'react-hexgrid';\r\nimport configs from './configurations'\r\nimport './hex.css';\r\nimport tile from './Tile';\r\n\r\nconst InteractiveHexagon = ({ tile }) => {\r\n    const [isActive, setIsActive] = useState(false);\r\n  \r\n    const handleClick = () => {\r\n      console.log('Hexagon clicked');\r\n      console.log('Tile:', tile);\r\n      //console.log(tile.getTileInfo());\r\n      console.log(\"----------------------------------------------------\");\r\n      console.log(`\"q\": ${tile.q}, \"r\": ${tile.r}, \"s\": ${tile.s}`);\r\n      setIsActive(!isActive); // Toggle the active state\r\n      console.log(\"Is active: \", !isActive);\r\n    };\r\n  \r\n    // Determine the fill pattern based on the biome\r\n    const fillColor = tile.biome === \"Plains\" ? \"url(#pat1)\" : \r\n                     tile.biome === \"Rock\" ? \"url(#pat2)\" : \r\n                     \"none\"; // default color\r\n  \r\n    return (\r\n      <Hexagon \r\n        q={tile.q} \r\n        r={tile.r} \r\n        s={tile.s} \r\n        size={configs.hexSize} \r\n        fill={isActive ? 'red' : fillColor} // Toggle between red and biome-specific pattern\r\n        onClick={handleClick}\r\n        className={`hexagon-group ${isActive ? 'active' : ''}`} // Apply a class conditionally\r\n      >\r\n        <Text className=\"hexagon-text\">{`${tile.q},${tile.r},${tile.s}`}</Text>\r\n        {/* Additional SVG elements as needed */}\r\n      </Hexagon>\r\n    );\r\n  };\r\n  \r\n  export default InteractiveHexagon;\r\n  \r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,OAAO,EAAEC,IAAI,QAAQ,eAAe;AAC7C,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAO,WAAW;AAClB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,kBAAkB,GAAGA,CAAC;EAAEH;AAAK,CAAC,KAAK;EAAAI,EAAA;EACrC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9BD,OAAO,CAACC,GAAG,CAAC,OAAO,EAAET,IAAI,CAAC;IAC1B;IACAQ,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;IACnED,OAAO,CAACC,GAAG,CAAE,QAAOT,IAAI,CAACU,CAAE,UAASV,IAAI,CAACW,CAAE,UAASX,IAAI,CAACY,CAAE,EAAC,CAAC;IAC7DN,WAAW,CAAC,CAACD,QAAQ,CAAC,CAAC,CAAC;IACxBG,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,CAACJ,QAAQ,CAAC;EACvC,CAAC;;EAED;EACA,MAAMQ,SAAS,GAAGb,IAAI,CAACc,KAAK,KAAK,QAAQ,GAAG,YAAY,GACvCd,IAAI,CAACc,KAAK,KAAK,MAAM,GAAG,YAAY,GACpC,MAAM,CAAC,CAAC;;EAEzB,oBACEZ,OAAA,CAACL,OAAO;IACNa,CAAC,EAAEV,IAAI,CAACU,CAAE;IACVC,CAAC,EAAEX,IAAI,CAACW,CAAE;IACVC,CAAC,EAAEZ,IAAI,CAACY,CAAE;IACVG,IAAI,EAAEhB,OAAO,CAACiB,OAAQ;IACtBC,IAAI,EAAEZ,QAAQ,GAAG,KAAK,GAAGQ,SAAU,CAAC;IAAA;IACpCK,OAAO,EAAEX,WAAY;IACrBY,SAAS,EAAG,iBAAgBd,QAAQ,GAAG,QAAQ,GAAG,EAAG,EAAE,CAAC;IAAA;IAAAe,QAAA,eAExDlB,OAAA,CAACJ,IAAI;MAACqB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAG,GAAEpB,IAAI,CAACU,CAAE,IAAGV,IAAI,CAACW,CAAE,IAAGX,IAAI,CAACY,CAAE;IAAC;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEhE,CAAC;AAEd,CAAC;AAACpB,EAAA,CAhCED,kBAAkB;AAAAsB,EAAA,GAAlBtB,kBAAkB;AAkCtB,eAAeA,kBAAkB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}