{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemes\\\\Desktop\\\\Work\\\\MENG TEAMPROJECT\\\\NEWHEX\\\\hex\\\\src\\\\InteractiveHexagon.js\",\n  _s = $RefreshSig$();\n//This component is responsible for rendering the hexagonal tiles and the interactivity.\n\nimport React, { useState } from 'react';\nimport { Hexagon, Text } from 'react-hexgrid';\nimport configs from './configurations';\nimport './hex.css';\nimport tile from './Tile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveHexagon = ({\n  tile\n}) => {\n  _s();\n  const [isActive, setIsActive] = useState(false);\n  // Define what happens when you click on a hexagon\n  const handleClick = () => {\n    console.log('Hexagon clicked');\n    console.log(tile.getTileInfo());\n    console.log(\"----------------------------------------------------\");\n    console.log(`\"q\": ${tile.q}, \"r\": ${tile.r}, \"s\": ${tile.s}`);\n    setIsActive(!isActive); // Toggle the active state\n    console.log(\"Is active: \", !isActive);\n  };\n  // Function to determine if a hexagon is on the edge of the grid\n  const isEdgeHexagon = (q, r, s) => {\n    const maxQ = configs.mapProps[0] - 1; // Assuming the grid is rectangular\n    const maxR = configs.mapProps[1] - 1;\n    return q === 0 || q === maxQ || r === 0 || r === maxR || s === 0 || s === -maxQ || s === -maxR;\n  };\n\n  // Determine fill color\n  const fillColor = isEdgeHexagon(tile.q, tile.r, tile.s) ? 'yellow' : isActive ? 'red' : 'green';\n  return /*#__PURE__*/_jsxDEV(Hexagon, {\n    q: tile.q,\n    r: tile.r,\n    s: tile.s,\n    size: configs.hexSize,\n    fill: fillColor,\n    onClick: handleClick,\n    className: `hexagon-group ${isActive ? 'active' : ''}` // Apply a class conditionally\n    ,\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      className: \"hexagon-text\",\n      children: `${tile.q},${tile.r},${tile.s}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractiveHexagon, \"OFRYOMGmWDzfQ4dzLF00ag1mHo0=\");\n_c = InteractiveHexagon;\nexport default InteractiveHexagon;\nvar _c;\n$RefreshReg$(_c, \"InteractiveHexagon\");","map":{"version":3,"names":["React","useState","Hexagon","Text","configs","tile","jsxDEV","_jsxDEV","InteractiveHexagon","_s","isActive","setIsActive","handleClick","console","log","getTileInfo","q","r","s","isEdgeHexagon","maxQ","mapProps","maxR","fillColor","size","hexSize","fill","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nemes/Desktop/Work/MENG TEAMPROJECT/NEWHEX/hex/src/InteractiveHexagon.js"],"sourcesContent":["//This component is responsible for rendering the hexagonal tiles and the interactivity.\r\n\r\nimport React, { useState } from 'react';\r\nimport { Hexagon, Text } from 'react-hexgrid';\r\nimport configs from './configurations'\r\nimport './hex.css';\r\nimport tile from './Tile';\r\n\r\nconst InteractiveHexagon = ({ tile }) => {\r\n    const [isActive, setIsActive] = useState(false);\r\n  // Define what happens when you click on a hexagon\r\n    const handleClick = () => {\r\n    console.log('Hexagon clicked');\r\n    console.log(tile.getTileInfo())\r\n    console.log(\"----------------------------------------------------\")\r\n    console.log(`\"q\": ${tile.q}, \"r\": ${tile.r}, \"s\": ${tile.s}`);\r\n    setIsActive(!isActive); // Toggle the active state\r\n    console.log(\"Is active: \",!isActive); \r\n  };\r\n// Function to determine if a hexagon is on the edge of the grid\r\n    const isEdgeHexagon = (q, r, s) => {\r\n        const maxQ = configs.mapProps[0] - 1; // Assuming the grid is rectangular\r\n        const maxR = configs.mapProps[1] - 1;\r\n        return q === 0 || q === maxQ || r === 0 || r === maxR || s === 0 || s === -maxQ || s === -maxR;\r\n    };\r\n\r\n    // Determine fill color\r\n    const fillColor = isEdgeHexagon(tile.q, tile.r, tile.s) ? 'yellow' : (isActive ? 'red' : 'green');\r\n\r\n    \r\n\r\n\r\n  return (\r\n    <Hexagon \r\n    q={tile.q} \r\n    r={tile.r} \r\n    s={tile.s} \r\n    size={configs.hexSize} \r\n    fill={fillColor} \r\n    onClick={handleClick}\r\n    className={`hexagon-group ${isActive ? 'active' : ''}`} // Apply a class conditionally\r\n    >\r\n      <Text className=\"hexagon-text\">{`${tile.q},${tile.r},${tile.s}`}</Text>\r\n      {/* Additional SVG elements as needed, e.g., resource icons */}\r\n    </Hexagon>\r\n  );\r\n};\r\n\r\nexport default InteractiveHexagon;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,OAAO,EAAEC,IAAI,QAAQ,eAAe;AAC7C,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAO,WAAW;AAClB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,kBAAkB,GAAGA,CAAC;EAAEH;AAAK,CAAC,KAAK;EAAAI,EAAA;EACrC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD;EACE,MAAMW,WAAW,GAAGA,CAAA,KAAM;IAC1BC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9BD,OAAO,CAACC,GAAG,CAACT,IAAI,CAACU,WAAW,CAAC,CAAC,CAAC;IAC/BF,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;IACnED,OAAO,CAACC,GAAG,CAAE,QAAOT,IAAI,CAACW,CAAE,UAASX,IAAI,CAACY,CAAE,UAASZ,IAAI,CAACa,CAAE,EAAC,CAAC;IAC7DP,WAAW,CAAC,CAACD,QAAQ,CAAC,CAAC,CAAC;IACxBG,OAAO,CAACC,GAAG,CAAC,aAAa,EAAC,CAACJ,QAAQ,CAAC;EACtC,CAAC;EACH;EACI,MAAMS,aAAa,GAAGA,CAACH,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAK;IAC/B,MAAME,IAAI,GAAGhB,OAAO,CAACiB,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,MAAMC,IAAI,GAAGlB,OAAO,CAACiB,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC;IACpC,OAAOL,CAAC,KAAK,CAAC,IAAIA,CAAC,KAAKI,IAAI,IAAIH,CAAC,KAAK,CAAC,IAAIA,CAAC,KAAKK,IAAI,IAAIJ,CAAC,KAAK,CAAC,IAAIA,CAAC,KAAK,CAACE,IAAI,IAAIF,CAAC,KAAK,CAACI,IAAI;EAClG,CAAC;;EAED;EACA,MAAMC,SAAS,GAAGJ,aAAa,CAACd,IAAI,CAACW,CAAC,EAAEX,IAAI,CAACY,CAAC,EAAEZ,IAAI,CAACa,CAAC,CAAC,GAAG,QAAQ,GAAIR,QAAQ,GAAG,KAAK,GAAG,OAAQ;EAKnG,oBACEH,OAAA,CAACL,OAAO;IACRc,CAAC,EAAEX,IAAI,CAACW,CAAE;IACVC,CAAC,EAAEZ,IAAI,CAACY,CAAE;IACVC,CAAC,EAAEb,IAAI,CAACa,CAAE;IACVM,IAAI,EAAEpB,OAAO,CAACqB,OAAQ;IACtBC,IAAI,EAAEH,SAAU;IAChBI,OAAO,EAAEf,WAAY;IACrBgB,SAAS,EAAG,iBAAgBlB,QAAQ,GAAG,QAAQ,GAAG,EAAG,EAAE,CAAC;IAAA;IAAAmB,QAAA,eAEtDtB,OAAA,CAACJ,IAAI;MAACyB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAG,GAAExB,IAAI,CAACW,CAAE,IAAGX,IAAI,CAACY,CAAE,IAAGZ,IAAI,CAACa,CAAE;IAAC;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEhE,CAAC;AAEd,CAAC;AAACxB,EAAA,CAtCID,kBAAkB;AAAA0B,EAAA,GAAlB1B,kBAAkB;AAwCxB,eAAeA,kBAAkB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}