{"ast":null,"code":"//This component is responsible for definiting the characteristics of the hexagonal tiles\n\n//q r and s are equivalent to x y and z coordinates\nimport GameSettings from './GameSettings';\nclass Tile {\n  constructor(q, r, s) {\n    this.q = q;\n    this.r = r;\n    this.s = s;\n    this.owner = null;\n    this.resources = {\n      techPoints: 0,\n      foodPoints: 0,\n      woodPoints: 0,\n      metalPoints: 0\n    };\n    this.biome = GameSettings.getBiomeForCoordinates(q, r);\n  }\n\n  // Method to check if the tile is owned by any player\n  isOwned() {\n    return this.owner !== null;\n  }\n\n  // Method to set the owner of the tile\n  setOwner(player) {\n    this.owner = player;\n  }\n\n  // Method to set the biome of the tile\n  setBiome(biome) {\n    this.biome = biome;\n  }\n\n  // Methods to set resource points \n\n  setFoodPoints(amount) {\n    this.resources.foodPoints = amount;\n  }\n  setWoodPoints(amount) {\n    this.resources.woodPoints = amount;\n  }\n  setMetalPoints(amount) {\n    this.resources.metalPoints = amount;\n  }\n\n  // Getter methods for resource points\n  getTechPoints() {\n    return this.resources.techPoints;\n  }\n  getFoodPoints() {\n    return this.resources.foodPoints;\n  }\n  getWoodPoints() {\n    return this.resources.woodPoints;\n  }\n  getMetalPoints() {\n    return this.resources.metalPoints;\n  }\n  getTileInfo() {\n    const coords = `Coordinates: (x: ${this.q}, y: ${this.r}, z: ${this.s})`;\n    const biomeInfo = this.biome ? `Biome: ${this.biome}` : \"Biome: None\";\n\n    // Create the resources text string from the resources object\n    const resourcesText = Object.entries(this.resources).map(([key, value]) => `${key}: ${value}`).join(', ');\n\n    // Now resourcesText can be used in the template literal\n    const resourcesInfo = `Resources: ${resourcesText}`;\n    return `${coords}, ${biomeInfo}, ${resourcesInfo}`;\n  }\n}\nexport default Tile;","map":{"version":3,"names":["GameSettings","Tile","constructor","q","r","s","owner","resources","techPoints","foodPoints","woodPoints","metalPoints","biome","getBiomeForCoordinates","isOwned","setOwner","player","setBiome","setFoodPoints","amount","setWoodPoints","setMetalPoints","getTechPoints","getFoodPoints","getWoodPoints","getMetalPoints","getTileInfo","coords","biomeInfo","resourcesText","Object","entries","map","key","value","join","resourcesInfo"],"sources":["C:/Users/nemes/Desktop/Work/Edutopia/frontend/NEWHEX/hex/src/Tile.js"],"sourcesContent":["//This component is responsible for definiting the characteristics of the hexagonal tiles\r\n\r\n//q r and s are equivalent to x y and z coordinates\r\nimport GameSettings from './GameSettings';\r\n\r\nclass Tile {\r\n    constructor(q, r, s) {\r\n        this.q = q;\r\n        this.r = r;\r\n        this.s = s; \r\n        this.owner = null;\r\n        this.resources = {\r\n            techPoints: 0,\r\n            foodPoints: 0,\r\n            woodPoints: 0,\r\n            metalPoints: 0,\r\n            };\r\n        this.biome = GameSettings.getBiomeForCoordinates(q, r);\r\n    }\r\n  \r\n    // Method to check if the tile is owned by any player\r\n    isOwned() {\r\n        return this.owner !== null;\r\n      }\r\n    \r\n      // Method to set the owner of the tile\r\n      setOwner(player) {\r\n        this.owner = player;\r\n      }\r\n    \r\n      // Method to set the biome of the tile\r\n      setBiome(biome) {\r\n        this.biome = biome;\r\n      }\r\n    \r\n      // Methods to set resource points \r\n  \r\n    setFoodPoints(amount) {\r\n      this.resources.foodPoints = amount;\r\n    }\r\n  \r\n    setWoodPoints(amount) {\r\n      this.resources.woodPoints = amount;\r\n    }\r\n  \r\n    setMetalPoints(amount) {\r\n      this.resources.metalPoints = amount;\r\n    }\r\n  \r\n    \r\n      // Getter methods for resource points\r\n      getTechPoints() {\r\n        return this.resources.techPoints;\r\n      }\r\n    \r\n      getFoodPoints() {\r\n        return this.resources.foodPoints;\r\n      }\r\n    \r\n      getWoodPoints() {\r\n        return this.resources.woodPoints;\r\n      }\r\n    \r\n      getMetalPoints() {\r\n        return this.resources.metalPoints;\r\n      }\r\n  \r\n      getTileInfo() {\r\n        const coords = `Coordinates: (x: ${this.q}, y: ${this.r}, z: ${this.s})`;\r\n        const biomeInfo = this.biome ? `Biome: ${this.biome}` : \"Biome: None\";\r\n      \r\n        // Create the resources text string from the resources object\r\n        const resourcesText = Object.entries(this.resources)\r\n          .map(([key, value]) => `${key}: ${value}`)\r\n          .join(', ');\r\n      \r\n        // Now resourcesText can be used in the template literal\r\n        const resourcesInfo = `Resources: ${resourcesText}`;\r\n      \r\n        return `${coords}, ${biomeInfo}, ${resourcesInfo}`;\r\n      }\r\n  }\r\n\r\nexport default Tile;"],"mappings":"AAAA;;AAEA;AACA,OAAOA,YAAY,MAAM,gBAAgB;AAEzC,MAAMC,IAAI,CAAC;EACPC,WAAWA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACjB,IAAI,CAACF,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,SAAS,GAAG;MACbC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE,CAAC;MACbC,WAAW,EAAE;IACb,CAAC;IACL,IAAI,CAACC,KAAK,GAAGZ,YAAY,CAACa,sBAAsB,CAACV,CAAC,EAAEC,CAAC,CAAC;EAC1D;;EAEA;EACAU,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACR,KAAK,KAAK,IAAI;EAC5B;;EAEA;EACAS,QAAQA,CAACC,MAAM,EAAE;IACf,IAAI,CAACV,KAAK,GAAGU,MAAM;EACrB;;EAEA;EACAC,QAAQA,CAACL,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;;EAEA;;EAEFM,aAAaA,CAACC,MAAM,EAAE;IACpB,IAAI,CAACZ,SAAS,CAACE,UAAU,GAAGU,MAAM;EACpC;EAEAC,aAAaA,CAACD,MAAM,EAAE;IACpB,IAAI,CAACZ,SAAS,CAACG,UAAU,GAAGS,MAAM;EACpC;EAEAE,cAAcA,CAACF,MAAM,EAAE;IACrB,IAAI,CAACZ,SAAS,CAACI,WAAW,GAAGQ,MAAM;EACrC;;EAGE;EACAG,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAACf,SAAS,CAACC,UAAU;EAClC;EAEAe,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAAChB,SAAS,CAACE,UAAU;EAClC;EAEAe,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAACjB,SAAS,CAACG,UAAU;EAClC;EAEAe,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAAClB,SAAS,CAACI,WAAW;EACnC;EAEAe,WAAWA,CAAA,EAAG;IACZ,MAAMC,MAAM,GAAI,oBAAmB,IAAI,CAACxB,CAAE,QAAO,IAAI,CAACC,CAAE,QAAO,IAAI,CAACC,CAAE,GAAE;IACxE,MAAMuB,SAAS,GAAG,IAAI,CAAChB,KAAK,GAAI,UAAS,IAAI,CAACA,KAAM,EAAC,GAAG,aAAa;;IAErE;IACA,MAAMiB,aAAa,GAAGC,MAAM,CAACC,OAAO,CAAC,IAAI,CAACxB,SAAS,CAAC,CACjDyB,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAM,GAAED,GAAI,KAAIC,KAAM,EAAC,CAAC,CACzCC,IAAI,CAAC,IAAI,CAAC;;IAEb;IACA,MAAMC,aAAa,GAAI,cAAaP,aAAc,EAAC;IAEnD,OAAQ,GAAEF,MAAO,KAAIC,SAAU,KAAIQ,aAAc,EAAC;EACpD;AACJ;AAEF,eAAenC,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}