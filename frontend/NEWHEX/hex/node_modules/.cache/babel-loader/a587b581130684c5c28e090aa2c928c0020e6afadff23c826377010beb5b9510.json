{"ast":null,"code":"//This component is responsible for definiting the characteristics of the hexagonal tiles\n\nclass Tile {\n  constructor(q, r) {\n    this.q = q;\n    this.r = r;\n    this.s = -q - r; // Calculate 's' based on q and r to satisfy the hexagon equation q + r + s = 0\n    //this.biome = GameSettings.getBiomeForCoordinates(x, y);\n    this.owner = null;\n    this.resources = {\n      techPoints: 0,\n      foodPoints: 0,\n      woodPoints: 0,\n      metalPoints: 0\n    };\n  }\n\n  // Method to check if the tile is owned by any player\n  isOwned() {\n    return this.owner !== null;\n  }\n\n  // Method to set the owner of the tile\n  setOwner(player) {\n    this.owner = player;\n  }\n\n  // Method to set the biome of the tile\n  setBiome(biome) {\n    this.biome = biome;\n  }\n\n  // Methods to set resource points \n\n  setFoodPoints(amount) {\n    this.resources.foodPoints = amount;\n  }\n  setWoodPoints(amount) {\n    this.resources.woodPoints = amount;\n  }\n  setMetalPoints(amount) {\n    this.resources.metalPoints = amount;\n  }\n\n  // Getter methods for resource points\n  getTechPoints() {\n    return this.resources.techPoints;\n  }\n  getFoodPoints() {\n    return this.resources.foodPoints;\n  }\n  getWoodPoints() {\n    return this.resources.woodPoints;\n  }\n  getMetalPoints() {\n    return this.resources.metalPoints;\n  }\n  getTileInfo() {\n    const coords = `Coordinates: (${this.coordinates.x}, ${this.coordinates.y}, ${this.coordinates.z} `;\n    const biomeInfo = this.biome ? `Biome: ${this.biome}` : \"Biome: None\";\n    return `${coords}, ${biomeInfo}`;\n  }\n}","map":{"version":3,"names":["Tile","constructor","q","r","s","owner","resources","techPoints","foodPoints","woodPoints","metalPoints","isOwned","setOwner","player","setBiome","biome","setFoodPoints","amount","setWoodPoints","setMetalPoints","getTechPoints","getFoodPoints","getWoodPoints","getMetalPoints","getTileInfo","coords","coordinates","x","y","z","biomeInfo"],"sources":["C:/Users/nemes/Desktop/Work/MENG TEAMPROJECT/NEWHEX/hex/src/Tile.js"],"sourcesContent":["//This component is responsible for definiting the characteristics of the hexagonal tiles\r\n\r\n\r\nclass Tile {\r\n    constructor(q, r) {\r\n        this.q = q;\r\n        this.r = r;\r\n        this.s = -q - r; // Calculate 's' based on q and r to satisfy the hexagon equation q + r + s = 0\r\n        //this.biome = GameSettings.getBiomeForCoordinates(x, y);\r\n        this.owner = null;\r\n        this.resources = {\r\n            techPoints: 0,\r\n            foodPoints: 0,\r\n            woodPoints: 0,\r\n            metalPoints: 0,\r\n            };\r\n    }\r\n  \r\n    // Method to check if the tile is owned by any player\r\n    isOwned() {\r\n        return this.owner !== null;\r\n      }\r\n    \r\n      // Method to set the owner of the tile\r\n      setOwner(player) {\r\n        this.owner = player;\r\n      }\r\n    \r\n      // Method to set the biome of the tile\r\n      setBiome(biome) {\r\n        this.biome = biome;\r\n      }\r\n    \r\n      // Methods to set resource points \r\n  \r\n    setFoodPoints(amount) {\r\n      this.resources.foodPoints = amount;\r\n    }\r\n  \r\n    setWoodPoints(amount) {\r\n      this.resources.woodPoints = amount;\r\n    }\r\n  \r\n    setMetalPoints(amount) {\r\n      this.resources.metalPoints = amount;\r\n    }\r\n  \r\n    \r\n      // Getter methods for resource points\r\n      getTechPoints() {\r\n        return this.resources.techPoints;\r\n      }\r\n    \r\n      getFoodPoints() {\r\n        return this.resources.foodPoints;\r\n      }\r\n    \r\n      getWoodPoints() {\r\n        return this.resources.woodPoints;\r\n      }\r\n    \r\n      getMetalPoints() {\r\n        return this.resources.metalPoints;\r\n      }\r\n  \r\n      getTileInfo() {\r\n          const coords = `Coordinates: (${this.coordinates.x}, ${this.coordinates.y}, ${this.coordinates.z} `;\r\n          const biomeInfo = this.biome ? `Biome: ${this.biome}` : \"Biome: None\";\r\n\r\n          return `${coords}, ${biomeInfo}`;\r\n        }\r\n  }"],"mappings":"AAAA;;AAGA,MAAMA,IAAI,CAAC;EACPC,WAAWA,CAACC,CAAC,EAAEC,CAAC,EAAE;IACd,IAAI,CAACD,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAG,CAACF,CAAC,GAAGC,CAAC,CAAC,CAAC;IACjB;IACA,IAAI,CAACE,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,SAAS,GAAG;MACbC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE,CAAC;MACbC,WAAW,EAAE;IACb,CAAC;EACT;;EAEA;EACAC,OAAOA,CAAA,EAAG;IACN,OAAO,IAAI,CAACN,KAAK,KAAK,IAAI;EAC5B;;EAEA;EACAO,QAAQA,CAACC,MAAM,EAAE;IACf,IAAI,CAACR,KAAK,GAAGQ,MAAM;EACrB;;EAEA;EACAC,QAAQA,CAACC,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;;EAEA;;EAEFC,aAAaA,CAACC,MAAM,EAAE;IACpB,IAAI,CAACX,SAAS,CAACE,UAAU,GAAGS,MAAM;EACpC;EAEAC,aAAaA,CAACD,MAAM,EAAE;IACpB,IAAI,CAACX,SAAS,CAACG,UAAU,GAAGQ,MAAM;EACpC;EAEAE,cAAcA,CAACF,MAAM,EAAE;IACrB,IAAI,CAACX,SAAS,CAACI,WAAW,GAAGO,MAAM;EACrC;;EAGE;EACAG,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAACd,SAAS,CAACC,UAAU;EAClC;EAEAc,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAACf,SAAS,CAACE,UAAU;EAClC;EAEAc,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAAChB,SAAS,CAACG,UAAU;EAClC;EAEAc,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAACjB,SAAS,CAACI,WAAW;EACnC;EAEAc,WAAWA,CAAA,EAAG;IACV,MAAMC,MAAM,GAAI,iBAAgB,IAAI,CAACC,WAAW,CAACC,CAAE,KAAI,IAAI,CAACD,WAAW,CAACE,CAAE,KAAI,IAAI,CAACF,WAAW,CAACG,CAAE,GAAE;IACnG,MAAMC,SAAS,GAAG,IAAI,CAACf,KAAK,GAAI,UAAS,IAAI,CAACA,KAAM,EAAC,GAAG,aAAa;IAErE,OAAQ,GAAEU,MAAO,KAAIK,SAAU,EAAC;EAClC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}