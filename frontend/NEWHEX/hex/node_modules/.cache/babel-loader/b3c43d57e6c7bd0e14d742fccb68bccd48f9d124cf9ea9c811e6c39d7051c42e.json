{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemes\\\\Desktop\\\\Work\\\\MENG TEAMPROJECT\\\\NEWHEX\\\\hex\\\\src\\\\Board.js\";\n//This component is responsible for rendering the hexagonal grid\n\nimport React, { Component, useState, useEffect } from 'react';\nimport { HexGrid, Layout, Hexagon, Text, GridGenerator, HexUtils } from 'react-hexgrid';\nimport InteractiveHexagon from './InteractiveHexagon';\nimport Tile from './Tile';\nimport configs from './configurations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    const configs = configs['rectangle'];\n    const generator = GridGenerator.getGenerator(configs.map);\n    const hexagons = generator.apply(this, configs.mapProps);\n    this.state = {\n      hexagons,\n      configs\n    };\n  }\n  changeType(event) {\n    const name = event.currentTarget.value;\n    const configs = configs[name];\n    const generator = GridGenerator.getGenerator(configs.map);\n    const hexagons = generator.apply(this, configs.mapProps);\n    this.setState({\n      hexagons,\n      configs\n    });\n  }\n  render() {\n    const {\n      hexagons,\n      configs\n    } = this.state;\n    const layout = configs.layout;\n    const size = {\n      x: layout.width,\n      y: layout.height\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(HexGrid, {\n        width: configs.width,\n        height: configs.height,\n        children: /*#__PURE__*/_jsxDEV(Layout, {\n          size: size,\n          flat: layout.flat,\n          spacing: layout.spacing,\n          origin: configs.origin,\n          children:\n          // note: key must be unique between re-renders.\n          // using config.mapProps+i makes a new key when the goal template chnages.\n          hexagons.map((hex, i) => /*#__PURE__*/_jsxDEV(Hexagon, {\n            q: hex.q,\n            r: hex.r,\n            s: hex.s,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              children: HexUtils.getID(hex)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 23\n            }, this)\n          }, configs.mapProps + i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n}\n;\nexport default Board;","map":{"version":3,"names":["React","Component","useState","useEffect","HexGrid","Layout","Hexagon","Text","GridGenerator","HexUtils","InteractiveHexagon","Tile","configs","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","constructor","props","generator","getGenerator","map","hexagons","apply","mapProps","state","changeType","event","name","currentTarget","value","setState","render","layout","size","x","width","y","height","children","flat","spacing","origin","hex","i","q","r","s","getID","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/nemes/Desktop/Work/MENG TEAMPROJECT/NEWHEX/hex/src/Board.js"],"sourcesContent":["//This component is responsible for rendering the hexagonal grid\r\n\r\nimport React, { Component, useState, useEffect } from 'react';\r\nimport { HexGrid, Layout, Hexagon, Text, GridGenerator, HexUtils } from 'react-hexgrid';\r\nimport InteractiveHexagon from './InteractiveHexagon';\r\nimport Tile from './Tile';\r\nimport configs from './configurations';\r\n\r\nclass Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const configs = configs['rectangle'];\r\n        const generator = GridGenerator.getGenerator(configs.map);\r\n        const hexagons = generator.apply(this, configs.mapProps);\r\n        this.state = { hexagons, configs };\r\n      }\r\n    \r\n      changeType(event) {\r\n        const name = event.currentTarget.value;\r\n        const configs = configs[name];\r\n        const generator = GridGenerator.getGenerator(configs.map);\r\n        const hexagons = generator.apply(this, configs.mapProps);\r\n        this.setState({ hexagons, configs });\r\n      }\r\n    \r\n      render() {\r\n        const { hexagons, configs } = this.state;\r\n        const layout = configs.layout;\r\n        const size = { x: layout.width, y: layout.height };\r\n        return (\r\n            <>\r\n            <HexGrid width={configs.width} height={configs.height}>\r\n              <Layout size={size} flat={layout.flat} spacing={layout.spacing} origin={configs.origin}>\r\n                {\r\n                  // note: key must be unique between re-renders.\r\n                  // using config.mapProps+i makes a new key when the goal template chnages.\r\n                  hexagons.map((hex, i) => (\r\n                    <Hexagon key={configs.mapProps + i} q={hex.q} r={hex.r} s={hex.s}>\r\n                      <Text>{HexUtils.getID(hex)}</Text>\r\n                    </Hexagon>\r\n                  ))\r\n                }\r\n              </Layout>\r\n            </HexGrid>\r\n            </>\r\n        );\r\n      }\r\n    };\r\n\r\nexport default Board;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}