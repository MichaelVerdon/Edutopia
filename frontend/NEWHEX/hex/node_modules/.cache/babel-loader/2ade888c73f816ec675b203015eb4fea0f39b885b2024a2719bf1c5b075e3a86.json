{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemes\\\\Desktop\\\\Work\\\\MENG TEAMPROJECT\\\\NEWHEX\\\\hex\\\\src\\\\Board.js\";\nimport React, { Component } from 'react';\nimport { HexGrid, Layout, Hexagon, Text, GridGenerator } from 'react-hexgrid';\nimport InteractiveHexagon from './InteractiveHexagon';\nimport Tile from './Tile';\nimport configs from './configurations';\nimport gapCoordinates from './gapCoordinates.json'; // Adjust the path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    const config = configs['rectangle'];\n    const generator = GridGenerator.getGenerator(config.map);\n    const hexCoordinates = generator.apply(this, config.mapProps);\n\n    // Create Tile instances for each hexagon\n    const hexagons = hexCoordinates.filter(hexCoord => !gapSet.has(`${hexCoord.q},${hexCoord.r},${hexCoord.s}`)).map(hexCoord => new Tile(hexCoord.q, hexCoord.r, hexCoord.s));\n    this.state = {\n      hexagons,\n      config,\n      viewBox: `${config.viewBox.x} ${config.viewBox.y} ${config.viewBox.width} ${config.viewBox.height}`\n    };\n  }\n  render() {\n    const {\n      hexagons,\n      config,\n      viewBox\n    } = this.state;\n    const size = {\n      x: config.layout.width,\n      y: config.layout.height\n    };\n    const gapSet = new Set(gapCoordinates.map(coord => `${coord.q},${coord.r},${coord.s}`));\n\n    // Container style for scrolling\n    const containerStyle = {\n      width: '100%',\n      overflow: 'auto',\n      maxHeight: '100vh'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: containerStyle,\n      children: /*#__PURE__*/_jsxDEV(HexGrid, {\n        width: config.width,\n        height: config.height,\n        viewBox: viewBox,\n        children: /*#__PURE__*/_jsxDEV(Layout, {\n          size: size,\n          flat: config.layout.flat,\n          spacing: config.layout.spacing,\n          origin: config.origin,\n          children: hexagons.map((hex, i) => /*#__PURE__*/_jsxDEV(InteractiveHexagon, {\n            q: hex.q,\n            r: hex.r,\n            s: hex.s,\n            size: size,\n            tile: hex // Pass the Tile instance to InteractiveHexagon\n          }, `${hex.q},${hex.r},${hex.s}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n}\n;\nexport default Board;","map":{"version":3,"names":["React","Component","HexGrid","Layout","Hexagon","Text","GridGenerator","InteractiveHexagon","Tile","configs","gapCoordinates","jsxDEV","_jsxDEV","Board","constructor","props","config","generator","getGenerator","map","hexCoordinates","apply","mapProps","hexagons","filter","hexCoord","gapSet","has","q","r","s","state","viewBox","x","y","width","height","render","size","layout","Set","coord","containerStyle","overflow","maxHeight","style","children","flat","spacing","origin","hex","i","tile","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/nemes/Desktop/Work/MENG TEAMPROJECT/NEWHEX/hex/src/Board.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { HexGrid, Layout, Hexagon, Text, GridGenerator } from 'react-hexgrid';\r\nimport InteractiveHexagon from './InteractiveHexagon';\r\nimport Tile from './Tile';\r\nimport configs from './configurations';\r\nimport gapCoordinates from './gapCoordinates.json'; // Adjust the path as needed\r\n\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const config = configs['rectangle'];\r\n    const generator = GridGenerator.getGenerator(config.map);\r\n    const hexCoordinates = generator.apply(this, config.mapProps);\r\n\r\n    // Create Tile instances for each hexagon\r\n    const hexagons = hexCoordinates\r\n      .filter(hexCoord => !gapSet.has(`${hexCoord.q},${hexCoord.r},${hexCoord.s}`))\r\n      .map(hexCoord => new Tile(hexCoord.q, hexCoord.r, hexCoord.s));\r\n\r\n    this.state = {\r\n      hexagons,\r\n      config,\r\n      viewBox: `${config.viewBox.x} ${config.viewBox.y} ${config.viewBox.width} ${config.viewBox.height}`,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { hexagons, config, viewBox } = this.state;\r\n    const size = { x: config.layout.width, y: config.layout.height };\r\n    const gapSet = new Set(gapCoordinates.map(coord => `${coord.q},${coord.r},${coord.s}`));\r\n\r\n    // Container style for scrolling\r\n    const containerStyle = {\r\n      width: '100%',\r\n      overflow: 'auto',\r\n      maxHeight: '100vh',\r\n    };\r\n\r\n    return (\r\n      <div style={containerStyle}>\r\n        <HexGrid width={config.width} height={config.height} viewBox={viewBox}>\r\n          <Layout size={size} flat={config.layout.flat} spacing={config.layout.spacing} origin={config.origin}>\r\n            {hexagons.map((hex, i) => (\r\n              <InteractiveHexagon\r\n                key={`${hex.q},${hex.r},${hex.s}`}\r\n                q={hex.q}\r\n                r={hex.r}\r\n                s={hex.s}\r\n                size={size}\r\n                tile={hex} // Pass the Tile instance to InteractiveHexagon\r\n              />\r\n            ))}\r\n          </Layout>\r\n        </HexGrid>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Board;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}