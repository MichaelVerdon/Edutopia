{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nemes\\\\Desktop\\\\Work\\\\MENG TEAMPROJECT\\\\NEWHEX\\\\hex\\\\src\\\\InteractiveHexagon.js\",\n  _s = $RefreshSig$();\n//This component is responsible for rendering the hexagonal tiles and the interactivity.\n\nimport React, { useState } from 'react';\nimport { Hexagon, Text } from 'react-hexgrid';\nimport configs from './configurations';\nimport './hex.css';\nimport GameSettings from './GameSettings';\nimport rock from './rock.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveHexagon = ({\n  tile\n}) => {\n  _s();\n  const [isActive, setIsActive] = useState(false);\n  const handleClick = () => {\n    console.log('Hexagon clicked');\n    console.log('Tile:', tile);\n    console.log(tile.getTileInfo());\n    console.log(\"----------------------------------------------------\");\n    console.log(`\"q\": ${tile.q}, \"r\": ${tile.r}, \"s\": ${tile.s}`);\n    setIsActive(!isActive); // Toggle the active state\n    console.log(\"Is active: \", !isActive);\n  };\n\n  // Determine the fill pattern based on the biome\n  const fillColor = isActive ? 'red' : determineFillColor(tile.biome);\n  return /*#__PURE__*/_jsxDEV(Hexagon, {\n    q: tile.q,\n    r: tile.r,\n    s: tile.s,\n    size: configs.hexSize,\n    fill: isActive ? 'red' : fillColor // Toggle between red and biome-specific pattern\n    ,\n    onClick: handleClick,\n    className: `hexagon-group ${isActive ? 'active' : ''}` // Apply a class conditionally\n    ,\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      className: \"hexagon-text\",\n      children: `${tile.q},${tile.r},${tile.s}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }, this);\n  function determineFillColor(biome) {\n    switch (biome) {\n      case \"Rock\":\n        return rock;\n      // Use the pattern ID for rocks\n      case \"Mountain\":\n        return \"url(#pat2)\";\n      // If you have a different pattern for mountains\n      default:\n        return \"none\";\n      // No fill for other biomes\n    }\n  }\n};\n_s(InteractiveHexagon, \"OFRYOMGmWDzfQ4dzLF00ag1mHo0=\");\n_c = InteractiveHexagon;\nexport default InteractiveHexagon;\nvar _c;\n$RefreshReg$(_c, \"InteractiveHexagon\");","map":{"version":3,"names":["React","useState","Hexagon","Text","configs","GameSettings","rock","jsxDEV","_jsxDEV","InteractiveHexagon","tile","_s","isActive","setIsActive","handleClick","console","log","getTileInfo","q","r","s","fillColor","determineFillColor","biome","size","hexSize","fill","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/nemes/Desktop/Work/MENG TEAMPROJECT/NEWHEX/hex/src/InteractiveHexagon.js"],"sourcesContent":["//This component is responsible for rendering the hexagonal tiles and the interactivity.\r\n\r\nimport React, { useState } from 'react';\r\nimport { Hexagon, Text } from 'react-hexgrid';\r\nimport configs from './configurations'\r\nimport './hex.css';\r\nimport GameSettings from './GameSettings';\r\nimport rock from './rock.png';\r\n\r\n\r\nconst InteractiveHexagon = ({ tile }) => {\r\n    const [isActive, setIsActive] = useState(false);\r\n  \r\n    const handleClick = () => {\r\n      console.log('Hexagon clicked');\r\n      console.log('Tile:', tile);\r\n      console.log(tile.getTileInfo());\r\n      console.log(\"----------------------------------------------------\");\r\n      console.log(`\"q\": ${tile.q}, \"r\": ${tile.r}, \"s\": ${tile.s}`);\r\n      setIsActive(!isActive); // Toggle the active state\r\n      console.log(\"Is active: \", !isActive);\r\n\r\n      \r\n    };\r\n  \r\n    // Determine the fill pattern based on the biome\r\n    const fillColor = isActive ? 'red' : determineFillColor(tile.biome);\r\n  \r\n    return (\r\n      <Hexagon \r\n        q={tile.q} \r\n        r={tile.r} \r\n        s={tile.s} \r\n        size={configs.hexSize} \r\n        fill={isActive ? 'red' : fillColor} // Toggle between red and biome-specific pattern\r\n        onClick={handleClick}\r\n        className={`hexagon-group ${isActive ? 'active' : ''}`} // Apply a class conditionally\r\n      >\r\n        <Text className=\"hexagon-text\">{`${tile.q},${tile.r},${tile.s}`}</Text>\r\n        {/* Additional SVG elements as needed */}\r\n      </Hexagon>\r\n    );\r\n\r\n    function determineFillColor(biome) {\r\n        switch (biome) {\r\n          case \"Rock\":\r\n            return rock;  // Use the pattern ID for rocks\r\n          case \"Mountain\":\r\n            return \"url(#pat2)\";  // If you have a different pattern for mountains\r\n          default:\r\n            return \"none\";  // No fill for other biomes\r\n        }\r\n    }\r\n\r\n\r\n  };\r\n  \r\n  export default InteractiveHexagon;\r\n  \r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,OAAO,EAAEC,IAAI,QAAQ,eAAe;AAC7C,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAO,WAAW;AAClB,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,IAAI,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG9B,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMa,WAAW,GAAGA,CAAA,KAAM;IACxBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9BD,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEN,IAAI,CAAC;IAC1BK,OAAO,CAACC,GAAG,CAACN,IAAI,CAACO,WAAW,CAAC,CAAC,CAAC;IAC/BF,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;IACnED,OAAO,CAACC,GAAG,CAAE,QAAON,IAAI,CAACQ,CAAE,UAASR,IAAI,CAACS,CAAE,UAAST,IAAI,CAACU,CAAE,EAAC,CAAC;IAC7DP,WAAW,CAAC,CAACD,QAAQ,CAAC,CAAC,CAAC;IACxBG,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,CAACJ,QAAQ,CAAC;EAGvC,CAAC;;EAED;EACA,MAAMS,SAAS,GAAGT,QAAQ,GAAG,KAAK,GAAGU,kBAAkB,CAACZ,IAAI,CAACa,KAAK,CAAC;EAEnE,oBACEf,OAAA,CAACN,OAAO;IACNgB,CAAC,EAAER,IAAI,CAACQ,CAAE;IACVC,CAAC,EAAET,IAAI,CAACS,CAAE;IACVC,CAAC,EAAEV,IAAI,CAACU,CAAE;IACVI,IAAI,EAAEpB,OAAO,CAACqB,OAAQ;IACtBC,IAAI,EAAEd,QAAQ,GAAG,KAAK,GAAGS,SAAU,CAAC;IAAA;IACpCM,OAAO,EAAEb,WAAY;IACrBc,SAAS,EAAG,iBAAgBhB,QAAQ,GAAG,QAAQ,GAAG,EAAG,EAAE,CAAC;IAAA;IAAAiB,QAAA,eAExDrB,OAAA,CAACL,IAAI;MAACyB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAG,GAAEnB,IAAI,CAACQ,CAAE,IAAGR,IAAI,CAACS,CAAE,IAAGT,IAAI,CAACU,CAAE;IAAC;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEhE,CAAC;EAGZ,SAASX,kBAAkBA,CAACC,KAAK,EAAE;IAC/B,QAAQA,KAAK;MACX,KAAK,MAAM;QACT,OAAOjB,IAAI;MAAG;MAChB,KAAK,UAAU;QACb,OAAO,YAAY;MAAG;MACxB;QACE,OAAO,MAAM;MAAG;IACpB;EACJ;AAGF,CAAC;AAACK,EAAA,CA7CEF,kBAAkB;AAAAyB,EAAA,GAAlBzB,kBAAkB;AA+CtB,eAAeA,kBAAkB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}